<!-- livebook:{"persist_outputs":true} -->

# MIDIex notebook

```elixir
Mix.install([:midiex])
```

<!-- livebook:{"output":true} -->

```
Resolving Hex dependencies...
Resolution completed in 0.478s
New:
  jason 1.4.0
  midiex 0.1.1
  rustler 0.26.0
  toml 0.7.0
* Getting midiex (Hex package)
* Getting rustler (Hex package)
* Getting jason (Hex package)
* Getting toml (Hex package)
==> toml
Compiling 10 files (.ex)
Generated toml app
==> jason
Compiling 10 files (.ex)
Generated jason app
==> rustler
Compiling 7 files (.ex)
Generated rustler app
==> midiex
Compiling 7 files (.ex)
Compiling crate midiex in release mode (native/midiex)
   Compiling memchr v2.5.0
   Compiling core-foundation-sys v0.8.3
   Compiling libc v0.2.138
   Compiling proc-macro2 v1.0.63
   Compiling regex-syntax v0.6.28
   Compiling coremidi-sys v3.1.0
   Compiling quote v1.0.28
   Compiling unicode-ident v1.0.5
   Compiling void v1.0.2
   Compiling rustler v0.29.0
   Compiling heck v0.4.0
   Compiling lazy_static v1.4.0
   Compiling unreachable v1.0.0
   Compiling block v0.1.6
   Compiling bitflags v1.3.2
   Compiling aho-corasick v0.7.20
   Compiling regex v1.7.0
   Compiling rustler_sys v2.3.0
   Compiling syn v2.0.22
   Compiling core-foundation v0.9.3
   Compiling coremidi v0.6.0
   Compiling coremidi v0.7.0
   Compiling midir v0.9.1
   Compiling rustler_codegen v0.29.0
   Compiling midiex v0.1.0 (/Users/haubie/Library/Caches/mix/installs/elixir-1.15.2-erts-14.0.2/5b3bac939799884e617fbffe06cae9cf/deps/midiex/native/midiex)
    Finished release [optimized] target(s) in 6.28s
Generated midiex app
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Introduction

### Learning objectives

This will get you started with Midiex. By the end of this Livebook you'll be able to:

* **Find** and **connect** to MIDI ports on your system
* **Create virtual ports** (on supported systems, like MacOS and Linux)
* **Send** and **recieve** messages.

### Setup

Just to make our code a bit more compact when experimenting with live-music coding, we'll alias the `Midiex.Message` module as `M`.

Midiex function names have been kept compact as possible with live-music coding in mind.

```elixir
alias Midiex.Listener
alias Midiex.Message, as: M
```

<!-- livebook:{"output":true} -->

```
Midiex.Message
```

## MIDI concepts

Skip this section you're familiar with MIDI concepts and want to start playing with the library.

At it's most basic, MIDI consists of:

* **Ports**, which represent input or output connections to MIDI hardware or software. You can recieve MIDI messages from a MIDI input, or send MIDI messages to a MIDI output.
* **Connections**, just like with all IO operations, you'll need to make a connection with a MIDI port to send or recieve messages to it.
* **Messages**, which are usually music related, such switching a note on or off.

<!-- livebook:{"break_markdown":true} -->

![](images/grokking_midi.png)

## Finding devices (ports)

### How many ports are there?

```elixir
Midiex.port_count()
```

<!-- livebook:{"output":true} -->

```
%{input: 1, output: 1}
```

### List devices (ports)

```elixir
ports = Midiex.ports()
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.1927633033.259915800.175566>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.1927633033.259915800.175567>
  }
]
```

### Filter to show input or output ports

```elixir
Midiex.ports(:output)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :output,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.1927633033.259915800.175569>
  }
]
```

```elixir
out_port = Midiex.ports(~r/Arturia/, :output) |> List.first()
```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
out_conn = Midiex.open(out_port)
```

```elixir
Midiex.send_msg(out_conn, <<0x90, 60, 127>>)
```

<!-- livebook:{"output":true} -->

```
%Midiex.OutConn{
  conn_ref: #Reference<0.522475107.1026162689.216660>,
  name: "Arturia MicroFreak",
  port_num: 1
}
```

```elixir
Midiex.ports(:input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.522475107.1026162712.215810>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 1,
    port_ref: #Reference<0.522475107.1026162712.215811>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 2,
    port_ref: #Reference<0.522475107.1026162712.215812>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "MiniFuse 2",
    num: 3,
    port_ref: #Reference<0.522475107.1026162712.215813>
  }
]
```

### Filter by port name

```elixir
Midiex.ports("IAC", :input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.522475107.1026162712.215818>
  }
]
```

## Virtual devices

```elixir
virtual_conn = Midiex.create_virtual_output("My Virtual Connection")
```

<!-- livebook:{"output":true} -->

```
%Midiex.OutConn{
  conn_ref: #Reference<0.522475107.1026162689.216746>,
  name: "My Virtual Connection",
  port_num: 4
}
```

Note that although you've created this virtual output, on your system it will appear as an import port to be discoverable by other MIDI software or devices.

If you call `Midiex.ports/1` you'll see it as an input:

```elixir
ports = Midiex.ports(:input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.522475107.1026162712.215826>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 1,
    port_ref: #Reference<0.522475107.1026162712.215827>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 2,
    port_ref: #Reference<0.522475107.1026162712.215828>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "MiniFuse 2",
    num: 3,
    port_ref: #Reference<0.522475107.1026162712.215829>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "My Virtual Connection",
    num: 4,
    port_ref: #Reference<0.522475107.1026162712.215830>
  }
]
```

## Make a connection to a device

### Connect to an output device and send a message

```elixir
out_conn =
  Midiex.ports("IAC", :output)
  |> List.first()
  |> Midiex.open()
```

<!-- livebook:{"output":true} -->

```
%Midiex.OutConn{
  conn_ref: #Reference<0.522475107.1026162689.216766>,
  name: "IAC Driver Bus 1",
  port_num: 0
}
```

```elixir
Midiex.Backend.get_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[]
```

```elixir
Midiex.Backend.listen(Midiex.ports(:input) |> Enum.at(2))
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 2,
    port_ref: #Reference<0.522475107.1026162712.215846>
  }
]
```

```elixir
in_port = Midiex.ports("Key", :input) |> List.first()
```

<!-- livebook:{"output":true} -->

```
%Midiex.MidiPort{
  direction: :input,
  name: "KeyStep Pro",
  num: 2,
  port_ref: #Reference<0.522475107.1026162712.215855>
}
```

```elixir
1..10//1
|> Enum.map(fn i ->
  :timer.sleep(1000)
  Midiex.Backend.test(in_port)
end)
```

<!-- livebook:{"output":true} -->

```
warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
  livebook/midiex_notebook.livemd#cell:7euaccszbergu2jit2isskr7ejpvc65q:2

```

<!-- livebook:{"output":true} -->

```
[:ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok]
```

```elixir
# Midiex.Backend.clear_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
nil
```

### Connect and listen to an input device

```elixir
defmodule MyMidiServer do
  use GenServer

  @impl true
  def init(state \\ []) do
    IO.inspect(state, label: "INIT")
    {:ok, state}
  end

  @impl true
  def handle_info(msg, state) do
    case msg do
      msg ->
        IO.inspect(msg, label: "FROM RUST")
        msg

      _ ->
        msg
    end

    {:noreply, state}
  end

  def listen_to(device_name \\ "IAC Driver") do
    Midiex.ports()
    |> Midiex.filter_port_name_contains(device_name, direction: :input)
    |> List.first()
    |> Midiex.listen()
  end

  def listen(pid, device_name) do
    GenServer.cast(pid, {:listen, device_name})
  end

  @impl true
  def handle_cast({:listen, device_name}, state) do
    listen_to(device_name)
    {:noreply, state}
  end

  def subscribe(pid) do
    GenServer.cast(pid, :subscribe)
  end

  @impl true
  def handle_cast(:subscribe, state) do
    Midiex.subscribe()
    {:noreply, state}
  end
end
```

<!-- livebook:{"output":true} -->

```
warning: clauses with the same name and arity (number of arguments) should be grouped together, "def handle_cast/2" was previously defined (livebook/midiex_notebook.livemd#cell:7rfguhfubcggnj6q6hoiiqg7lbqbjlab:36)
  livebook/midiex_notebook.livemd#cell:7rfguhfubcggnj6q6hoiiqg7lbqbjlab:46

warning: this clause cannot match because a previous clause at line 13 always matches
  livebook/midiex_notebook.livemd#cell:7rfguhfubcggnj6q6hoiiqg7lbqbjlab:17

warning: Midiex.filter_port_name_contains/3 is undefined or private
  livebook/midiex_notebook.livemd#cell:7rfguhfubcggnj6q6hoiiqg7lbqbjlab:26: MyMidiServer.listen_to/1

```

<!-- livebook:{"output":true} -->

```
{:module, MyMidiServer, <<70, 79, 82, 49, 0, 0, 21, ...>>, {:handle_cast, 2}}
```

```elixir
{:ok, pid} = GenServer.start_link(MyMidiServer, [])
```

<!-- livebook:{"output":true} -->

```
INIT: []
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.264.0>}
```

```elixir
# MyMidiServer.listen(pid, "KeyStep")
# MyMidiServer.listen(pid, "MicroFreak")
```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
MyMidiServer.subscribe(pid)
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
```

```elixir
Midiex.Backend.listen(Midiex.ports(:input) |> Enum.at(1))
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 1,
    port_ref: #Reference<0.522475107.1026162712.215863>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 2,
    port_ref: #Reference<0.522475107.1026162712.215846>
  }
]
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 1}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 2}
```

```elixir
Midiex.Backend.get_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.2084832073.4240834584.3914>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "My Virtual Connection",
    num: 1,
    port_ref: #Reference<0.2084832073.4240834584.3918>
  }
]
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "IAC Driver Bus 1", "port_num" => 0}
FROM RUST: %{"port_name" => "My Virtual Connection", "port_num" => 1}
FROM RUST: %{"port_name" => "IAC Driver Bus 1", "port_num" => 0}
FROM RUST: %{"port_name" => "My Virtual Connection", "port_num" => 1}
FROM RUST: %{"port_name" => "IAC Driver Bus 1", "port_num" => 0}
FROM RUST: %{"port_name" => "My Virtual Connection", "port_num" => 1}
```

```elixir
Midiex.Backend.clear_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[]
```
