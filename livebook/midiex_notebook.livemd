<!-- livebook:{"persist_outputs":true} -->

# MIDIex notebook

```elixir
Mix.install([{:midiex, path: "/Users/haubie/Development/midiex"}])
```

<!-- livebook:{"output":true} -->

```
==> midiex
Compiling 1 file (.ex)
Compiling crate midiex in release mode (native/midiex)
   Compiling midiex v0.1.0 (/Users/haubie/Development/midiex/native/midiex)
    Finished release [optimized] target(s) in 0.48s
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Setup

## Finding devices (ports)

### How many ports are there?

```elixir
Midiex.count_ports()
```

<!-- livebook:{"output":true} -->

```
%{input: 5, output: 5}
```

### List devices (ports)

```elixir
ports = Midiex.list_ports()
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33773>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia DrumBrute Impact",
    num: 1,
    port_ref: #Reference<0.363119091.1102708760.33774>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.363119091.1102708760.33775>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33776>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "USB MIDI Device",
    num: 4,
    port_ref: #Reference<0.363119091.1102708760.33777>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33778>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "Arturia DrumBrute Impact",
    num: 1,
    port_ref: #Reference<0.363119091.1102708760.33779>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.363119091.1102708760.33780>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33781>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "USB MIDI Device",
    num: 4,
    port_ref: #Reference<0.363119091.1102708760.33782>
  }
]
```

### Filter to show input or output ports

```elixir
Midiex.list_ports(:output)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :output,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33788>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "Arturia DrumBrute Impact",
    num: 1,
    port_ref: #Reference<0.363119091.1102708760.33789>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.363119091.1102708760.33790>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33791>
  },
  %Midiex.MidiPort{
    direction: :output,
    name: "USB MIDI Device",
    num: 4,
    port_ref: #Reference<0.363119091.1102708760.33792>
  }
]
```

```elixir
Midiex.list_ports(:input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33793>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia DrumBrute Impact",
    num: 1,
    port_ref: #Reference<0.363119091.1102708760.33794>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.363119091.1102708760.33795>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33796>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "USB MIDI Device",
    num: 4,
    port_ref: #Reference<0.363119091.1102708760.33797>
  }
]
```

### Filter by port name

```elixir
Midiex.list_ports("IAC", :input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33803>
  }
]
```

## Virtual devices

```elixir
virtual_conn = Midiex.create_virtual_output("My Virtual Connection")
```

<!-- livebook:{"output":true} -->

```
%Midiex.OutConn{
  conn_ref: #Reference<0.363119091.1102708745.36030>,
  name: "My Virtual Connection",
  port_num: 5
}
```

Note that although you've created this virtual output, on your system it will appear as an import port to be discoverable by other MIDI software or devices.

If you call `Midiex.list_ports/1` you'll see it as an input:

```elixir
ports = Midiex.list_ports(:input)
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "IAC Driver Bus 1",
    num: 0,
    port_ref: #Reference<0.363119091.1102708760.33813>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia DrumBrute Impact",
    num: 1,
    port_ref: #Reference<0.363119091.1102708760.33814>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.363119091.1102708760.33815>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33816>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "USB MIDI Device",
    num: 4,
    port_ref: #Reference<0.363119091.1102708760.33817>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "My Virtual Connection",
    num: 5,
    port_ref: #Reference<0.363119091.1102708760.33818>
  }
]
```

## Make a connection to a device

### Connect to an output device and send a message

```elixir
out_conn =
  Midiex.list_ports("IAC", :output)
  |> List.first()
  |> Midiex.open()
```

<!-- livebook:{"output":true} -->

```
%Midiex.OutConn{
  conn_ref: #Reference<0.363119091.1102708745.36054>,
  name: "IAC Driver Bus 1",
  port_num: 0
}
```

```elixir
Midiex.Backend.get_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[]
```

```elixir
Midiex.Backend.listen(Midiex.list_ports(:input) |> Enum.at(3))
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.363119091.1102708760.33838>
  }
]
```

```elixir
# Midiex.Backend.clear_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
nil
```

### Connect and listen to an input device

```elixir
defmodule MyMidiServer do
  use GenServer

  @impl true
  def init(state \\ []) do
    IO.inspect(state, label: "INIT")
    {:ok, state}
  end

  @impl true
  def handle_info(msg, state) do
    case msg do
      msg ->
        IO.inspect(msg, label: "FROM RUST")
        msg

      _ ->
        msg
    end

    {:noreply, state}
  end

  def listen_to(device_name \\ "IAC Driver") do
    Midiex.list_ports()
    |> Midiex.filter_port_name_contains(device_name, direction: :input)
    |> List.first()
    |> Midiex.listen()
  end

  def listen(pid, device_name) do
    GenServer.cast(pid, {:listen, device_name})
  end

  @impl true
  def handle_cast({:listen, device_name}, state) do
    listen_to(device_name)
    {:noreply, state}
  end

  def subscribe(pid) do
    GenServer.cast(pid, :subscribe)
  end

  @impl true
  def handle_cast(:subscribe, state) do
    Midiex.subscribe()
    {:noreply, state}
  end
end
```

<!-- livebook:{"output":true} -->

```
warning: clauses with the same name and arity (number of arguments) should be grouped together, "def handle_cast/2" was previously defined (livebook/midiex_notebook.livemd#cell:toedrnbfplyqxocdq7hp7p7kom7ffqil:36)
  livebook/midiex_notebook.livemd#cell:toedrnbfplyqxocdq7hp7p7kom7ffqil:46

warning: this clause cannot match because a previous clause at line 13 always matches
  livebook/midiex_notebook.livemd#cell:toedrnbfplyqxocdq7hp7p7kom7ffqil:17

warning: Midiex.filter_port_name_contains/3 is undefined or private
  livebook/midiex_notebook.livemd#cell:toedrnbfplyqxocdq7hp7p7kom7ffqil:26: MyMidiServer.listen_to/1

```

<!-- livebook:{"output":true} -->

```
{:module, MyMidiServer, <<70, 79, 82, 49, 0, 0, 21, ...>>, {:handle_cast, 2}}
```

```elixir
{:ok, pid} = GenServer.start_link(MyMidiServer, [])
```

<!-- livebook:{"output":true} -->

```
INIT: []
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.262.0>}
```

```elixir
# MyMidiServer.listen(pid, "KeyStep")
# MyMidiServer.listen(pid, "MicroFreak")
```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
MyMidiServer.subscribe(pid)
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
```

```elixir
Midiex.Backend.listen(Midiex.list_ports(:input) |> Enum.at(3))
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.2378396349.566362136.36623>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.2378396349.566362136.36635>
  }
]
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
```

```elixir
Midiex.Backend.get_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[
  %Midiex.MidiPort{
    direction: :input,
    name: "Arturia MicroFreak",
    num: 2,
    port_ref: #Reference<0.3580799270.3518365720.258883>
  },
  %Midiex.MidiPort{
    direction: :input,
    name: "KeyStep Pro",
    num: 3,
    port_ref: #Reference<0.3580799270.3518365720.258895>
  }
]
```

<!-- livebook:{"output":true} -->

```
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
FROM RUST: %{"port_name" => "Arturia MicroFreak", "port_num" => 2}
FROM RUST: %{"port_name" => "KeyStep Pro", "port_num" => 3}
```

```elixir
Midiex.Backend.clear_subscribed_ports()
```

<!-- livebook:{"output":true} -->

```
[]
```
